// Code generated by musgen. DO NOT EDIT.

package posbus

import (
	"github.com/momentum-xyz/ubercontroller/types/entry"
	"github.com/momentum-xyz/ubercontroller/utils/umid"
	"github.com/ymz-ncnk/muserrs"
)

// MarshalMUS fills buf with the MUS encoding of v.
func (v ObjectData) MarshalMUS(buf []byte) int {
	i := 0
	{
		si := v.ID.MarshalMUS(buf[i:])
		i += si
	}
	{
		length := len(v.Entries)
		{
			uv := uint64(length)
			if length < 0 {
				uv = ^(uv << 1)
			} else {
				uv = uv << 1
			}
			{
				for uv >= 0x80 {
					buf[i] = byte(uv) | 0x80
					uv >>= 7
					i++
				}
				buf[i] = byte(uv)
				i++
			}
		}
		for ke, vl := range v.Entries {
			{
				si := ke.MarshalMUS(buf[i:])
				i += si
			}
			if vl == nil {
				buf[i] = 0
				i++
			} else {
				buf[i] = 1
				i++
				{
					si := (*vl).MarshalMUS(buf[i:])
					i += si
				}
			}
		}
	}
	return i
}

// UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
func (v *ObjectData) UnmarshalMUS(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var sv umid.UMID
		si := 0
		si, err = sv.UnmarshalMUS(buf[i:])
		if err == nil {
			v.ID = sv
			i += si
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("ID", err)
	}
	{
		var length int
		{
			var uv uint64
			{
				if i > len(buf)-1 {
					return i, muserrs.ErrSmallBuf
				}
				shift := 0
				done := false
				for l, b := range buf[i:] {
					if l == 9 && b > 1 {
						return i, muserrs.ErrOverflow
					}
					if b < 0x80 {
						uv = uv | uint64(b)<<shift
						done = true
						i += l + 1
						break
					}
					uv = uv | uint64(b&0x7F)<<shift
					shift += 7
				}
				if !done {
					return i, muserrs.ErrSmallBuf
				}
			}
			if uv&1 == 1 {
				uv = ^(uv >> 1)
			} else {
				uv = uv >> 1
			}
			length = int(uv)
		}
		if length < 0 {
			return i, muserrs.ErrNegativeLength
		}
		v.Entries = make(map[entry.SlotType]*StringAnyMap)
		for ; length > 0; length-- {
			var kem entry.SlotType
			vlm := new(StringAnyMap)
			{
				var sv entry.SlotType
				si := 0
				si, err = sv.UnmarshalMUS(buf[i:])
				if err == nil {
					kem = sv
					i += si
				}
			}
			if err != nil {
				err = muserrs.NewMapKeyError(kem, err)
				break
			}
			if buf[i] == 0 {
				i++
				vlm = nil
			} else if buf[i] != 1 {
				i++
				return i, muserrs.ErrWrongByte
			} else {
				i++
				{
					var sv StringAnyMap
					si := 0
					si, err = sv.UnmarshalMUS(buf[i:])
					if err == nil {
						(*vlm) = sv
						i += si
					}
				}
			}
			if err != nil {
				err = muserrs.NewMapValueError(kem, vlm, err)
				break
			}
			(v.Entries)[kem] = vlm
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("Entries", err)
	}
	return i, err
}

// SizeMUS returns the size of the MUS-encoded v.
func (v ObjectData) SizeMUS() int {
	size := 0
	{
		ss := v.ID.SizeMUS()
		size += ss
	}
	{
		length := len(v.Entries)
		{
			uv := uint64(length<<1) ^ uint64(length>>63)
			{
				for uv >= 0x80 {
					uv >>= 7
					size++
				}
				size++
			}
		}
		for ke, vl := range v.Entries {
			{
				ss := ke.SizeMUS()
				size += ss
			}
			size++
			if vl != nil {
				{
					ss := (*vl).SizeMUS()
					size += ss
				}
			}
		}
	}
	return size
}
