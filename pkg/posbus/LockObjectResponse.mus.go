// Code generated by musgen. DO NOT EDIT.

package posbus

import (
	"github.com/momentum-xyz/ubercontroller/utils/umid"
	"github.com/ymz-ncnk/muserrs"
)

// MarshalMUS fills buf with the MUS encoding of v.
func (v LockObjectResponse) MarshalMUS(buf []byte) int {
	i := 0
	{
		si := v.ID.MarshalMUS(buf[i:])
		i += si
	}
	{
		for v.Result >= 0x80 {
			buf[i] = byte(v.Result) | 0x80
			v.Result >>= 7
			i++
		}
		buf[i] = byte(v.Result)
		i++
	}
	{
		si := v.LockOwner.MarshalMUS(buf[i:])
		i += si
	}
	return i
}

// UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
func (v *LockObjectResponse) UnmarshalMUS(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var sv umid.UMID
		si := 0
		si, err = sv.UnmarshalMUS(buf[i:])
		if err == nil {
			v.ID = sv
			i += si
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("ID", err)
	}
	{
		if i > len(buf)-1 {
			return i, muserrs.ErrSmallBuf
		}
		shift := 0
		done := false
		for l, b := range buf[i:] {
			if l == 4 && b > 15 {
				return i, muserrs.ErrOverflow
			}
			if b < 0x80 {
				v.Result = v.Result | uint32(b)<<shift
				done = true
				i += l + 1
				break
			}
			v.Result = v.Result | uint32(b&0x7F)<<shift
			shift += 7
		}
		if !done {
			return i, muserrs.ErrSmallBuf
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("Result", err)
	}
	{
		var sv umid.UMID
		si := 0
		si, err = sv.UnmarshalMUS(buf[i:])
		if err == nil {
			v.LockOwner = sv
			i += si
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("LockOwner", err)
	}
	return i, err
}

// SizeMUS returns the size of the MUS-encoded v.
func (v LockObjectResponse) SizeMUS() int {
	size := 0
	{
		ss := v.ID.SizeMUS()
		size += ss
	}
	{
		for v.Result >= 0x80 {
			v.Result >>= 7
			size++
		}
		size++
	}
	{
		ss := v.LockOwner.SizeMUS()
		size += ss
	}
	return size
}
