// Code generated by musgen. DO NOT EDIT.

package cmath

import "github.com/ymz-ncnk/muserrs"

// MarshalMUS fills buf with the MUS encoding of v.
func (v UserTransform) MarshalMUS(buf []byte) int {
	i := 0
	{
		si := v.Position.MarshalMUS(buf[i:])
		i += si
	}
	{
		si := v.Rotation.MarshalMUS(buf[i:])
		i += si
	}
	return i
}

// UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
func (v *UserTransform) UnmarshalMUS(buf []byte) (int, error) {
	i := 0
	var err error
	{
		var sv Vec3
		si := 0
		si, err = sv.UnmarshalMUS(buf[i:])
		if err == nil {
			v.Position = sv
			i += si
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("Position", err)
	}
	{
		var sv Vec3
		si := 0
		si, err = sv.UnmarshalMUS(buf[i:])
		if err == nil {
			v.Rotation = sv
			i += si
		}
	}
	if err != nil {
		return i, muserrs.NewFieldError("Rotation", err)
	}
	return i, err
}

// SizeMUS returns the size of the MUS-encoded v.
func (v UserTransform) SizeMUS() int {
	size := 0
	{
		ss := v.Position.SizeMUS()
		size += ss
	}
	{
		ss := v.Rotation.SizeMUS()
		size += ss
	}
	return size
}
