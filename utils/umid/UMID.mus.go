// Code generated by musgen. DO NOT EDIT.

package umid

import "github.com/ymz-ncnk/muserrs"

// MarshalMUS fills buf with the MUS encoding of v.
func (v UMID) MarshalMUS(buf []byte) int {
	i := 0
	{
		for _, item := range v {
			{
				buf[i] = byte(item)
				i++
			}
		}
	}
	return i
}

// UnmarshalMUS parses the MUS-encoded buf, and sets the result to *v.
func (v *UMID) UnmarshalMUS(buf []byte) (int, error) {
	i := 0
	var err error
	{
		for j := 0; j < 16; j++ {
			{
				if i > len(buf)-1 {
					return i, muserrs.ErrSmallBuf
				}
				(*v)[j] = uint8(buf[i])
				i++
			}
			if err != nil {
				err = muserrs.NewArrayError(j, err)
				break
			}
		}
	}
	return i, err
}

// SizeMUS returns the size of the MUS-encoded v.
func (v UMID) SizeMUS() int {
	size := 0
	{
		for _, item := range v {
			{
				_ = item
				size++
			}
		}
	}
	return size
}
